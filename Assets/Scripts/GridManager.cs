using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GridManager : MonoBehaviour
{
    [SerializeField] private int _width, _height;
    [SerializeField] private Tile _tilePrefab; // Tile m·∫∑c ƒë·ªãnh

    [Header("Wall Prefabs")]
    [SerializeField] private GameObject _wallTop;  // T∆∞·ªùng tr√™n c√πng
    [SerializeField] private GameObject _cornerTopLeft, _cornerTopRight; // G√≥c tr√™n
    [SerializeField] private GameObject _cornerBottomLeft, _cornerBottomRight; // G√≥c d∆∞·ªõi
    [SerializeField] private GameObject _horizontalEdge, _verticalEdge; // C·∫°nh ngang & d·ªçc

    [SerializeField] private Transform _cam;

    private Dictionary<Vector2, Tile> _tiles; // L∆∞u danh s√°ch tile
    private Transform _tileParent, _decoParent; // Parent objects ƒë·ªÉ g·ªôp tile & deco

    void Start()
    {
        _tileParent = new GameObject("Tiles").transform;  // Parent cho Tiles
        _decoParent = new GameObject("Deco").transform;   // Parent cho Deco

        GenerateGrid(); // Spawn map tr∆∞·ªõc
        GenerateDeco(); // Th√™m deco sau
    }

    // üîπ Spawn map tr∆∞·ªõc
    void GenerateGrid()
    {
        _tiles = new Dictionary<Vector2, Tile>();

        for (int x = 0; x < _width; x++)
        {
            for (int y = 0; y < _height; y++)
            {
                var spawnedTile = Instantiate(_tilePrefab, new Vector3(x, y), Quaternion.identity, _tileParent);
                spawnedTile.name = $"Tile {x} {y}";

                var isOffset = (x % 2 == 0 && y % 2 != 0) || (x % 2 != 0 && y % 2 == 0);
                spawnedTile.Init(isOffset);

                _tiles[new Vector2(x, y)] = spawnedTile;
            }
        }

        // CƒÉn gi·ªØa camera
        _cam.transform.position = new Vector3((float)_width / 2 - 0.5f, (float)_height / 2 - 0.5f, -10);
    }

    // üîπ Th√™m t∆∞·ªùng & deco sau khi map ƒë√£ ƒë∆∞·ª£c t·∫°o
    void GenerateDeco()
    {
        // üü¢ Spawn WallTop tr√™n h√†ng tr√™n c√πng
        for (int x = 0; x < _width; x++)
        {
            Vector3 position = new Vector3(x, _height, 0);
            Instantiate(_wallTop, position, Quaternion.identity, _decoParent).name = $"WallTop {x} {_height}";
        }

        // üü¢ Bao quanh WallTop + Grid b·∫±ng Edge & Corner
        for (int x = -1; x <= _width; x++)
        {
            for (int y = -1; y <= _height + 1; y++)
            {
                Vector3 position = new Vector3(x, y, 0);

                // N·∫øu v·ªã tr√≠ n·∫±m ngo√†i khu v·ª±c map & WallTop
                if (y == _height + 1) // H√†ng tr√™n c√πng (ngo√†i WallTop)
                {
                    if (x == -1)
                        Instantiate(_cornerTopLeft, position, Quaternion.identity, _decoParent).name = "Corner Top Left";
                    else if (x == _width)
                        Instantiate(_cornerTopRight, position, Quaternion.identity, _decoParent).name = "Corner Top Right";
                    else
                        Instantiate(_horizontalEdge, position, Quaternion.identity, _decoParent).name = $"Horizontal Edge {x} {y}";
                }
                else if (y == -1) // H√†ng d∆∞·ªõi c√πng (ngo√†i Grid)
                {
                    if (x == -1)
                        Instantiate(_cornerBottomLeft, position, Quaternion.identity, _decoParent).name = "Corner Bottom Left";
                    else if (x == _width)
                        Instantiate(_cornerBottomRight, position, Quaternion.identity, _decoParent).name = "Corner Bottom Right";
                    else
                        Instantiate(_horizontalEdge, position, Quaternion.identity, _decoParent).name = $"Horizontal Edge {x} {y}";
                }
                else if (x == -1) // C·∫°nh tr√°i
                {
                    Instantiate(_verticalEdge, position, Quaternion.identity, _decoParent).name = $"Vertical Edge {x} {y}";
                }
                else if (x == _width) // C·∫°nh ph·∫£i
                {
                    Instantiate(_verticalEdge, position, Quaternion.identity, _decoParent).name = $"Vertical Edge {x} {y}";
                }
            }
        }

        Debug.Log("WallTop, Corner & Edge ƒë√£ ƒë∆∞·ª£c spawn xong!");
    }

    public Tile GetTileAtPosition(Vector2 pos)
    {
        if (_tiles.TryGetValue(pos, out var tile)) return tile;
        return null;
    }
}
